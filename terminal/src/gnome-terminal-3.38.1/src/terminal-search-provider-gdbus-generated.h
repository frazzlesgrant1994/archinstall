/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __TERMINAL_SEARCH_PROVIDER_GDBUS_GENERATED_H__
#define __TERMINAL_SEARCH_PROVIDER_GDBUS_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Shell.SearchProvider2 */

#define TERMINAL_TYPE_SEARCH_PROVIDER2 (terminal_search_provider2_get_type ())
#define TERMINAL_SEARCH_PROVIDER2(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TERMINAL_TYPE_SEARCH_PROVIDER2, TerminalSearchProvider2))
#define TERMINAL_IS_SEARCH_PROVIDER2(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TERMINAL_TYPE_SEARCH_PROVIDER2))
#define TERMINAL_SEARCH_PROVIDER2_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TERMINAL_TYPE_SEARCH_PROVIDER2, TerminalSearchProvider2Iface))

struct _TerminalSearchProvider2;
typedef struct _TerminalSearchProvider2 TerminalSearchProvider2;
typedef struct _TerminalSearchProvider2Iface TerminalSearchProvider2Iface;

struct _TerminalSearchProvider2Iface
{
  GTypeInterface parent_iface;

  gboolean (*handle_activate_result) (
    TerminalSearchProvider2 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_identifier,
    const gchar *const *arg_terms,
    guint arg_timestamp);

  gboolean (*handle_get_initial_result_set) (
    TerminalSearchProvider2 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_terms);

  gboolean (*handle_get_result_metas) (
    TerminalSearchProvider2 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_identifiers);

  gboolean (*handle_get_subsearch_result_set) (
    TerminalSearchProvider2 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_previous_results,
    const gchar *const *arg_terms);

  gboolean (*handle_launch_search) (
    TerminalSearchProvider2 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_terms,
    guint arg_timestamp);

};

GType terminal_search_provider2_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *terminal_search_provider2_interface_info (void);
guint terminal_search_provider2_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void terminal_search_provider2_complete_get_initial_result_set (
    TerminalSearchProvider2 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *results);

void terminal_search_provider2_complete_get_subsearch_result_set (
    TerminalSearchProvider2 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *results);

void terminal_search_provider2_complete_get_result_metas (
    TerminalSearchProvider2 *object,
    GDBusMethodInvocation *invocation,
    GVariant *metas);

void terminal_search_provider2_complete_activate_result (
    TerminalSearchProvider2 *object,
    GDBusMethodInvocation *invocation);

void terminal_search_provider2_complete_launch_search (
    TerminalSearchProvider2 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void terminal_search_provider2_call_get_initial_result_set (
    TerminalSearchProvider2 *proxy,
    const gchar *const *arg_terms,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean terminal_search_provider2_call_get_initial_result_set_finish (
    TerminalSearchProvider2 *proxy,
    gchar ***out_results,
    GAsyncResult *res,
    GError **error);

gboolean terminal_search_provider2_call_get_initial_result_set_sync (
    TerminalSearchProvider2 *proxy,
    const gchar *const *arg_terms,
    gchar ***out_results,
    GCancellable *cancellable,
    GError **error);

void terminal_search_provider2_call_get_subsearch_result_set (
    TerminalSearchProvider2 *proxy,
    const gchar *const *arg_previous_results,
    const gchar *const *arg_terms,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean terminal_search_provider2_call_get_subsearch_result_set_finish (
    TerminalSearchProvider2 *proxy,
    gchar ***out_results,
    GAsyncResult *res,
    GError **error);

gboolean terminal_search_provider2_call_get_subsearch_result_set_sync (
    TerminalSearchProvider2 *proxy,
    const gchar *const *arg_previous_results,
    const gchar *const *arg_terms,
    gchar ***out_results,
    GCancellable *cancellable,
    GError **error);

void terminal_search_provider2_call_get_result_metas (
    TerminalSearchProvider2 *proxy,
    const gchar *const *arg_identifiers,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean terminal_search_provider2_call_get_result_metas_finish (
    TerminalSearchProvider2 *proxy,
    GVariant **out_metas,
    GAsyncResult *res,
    GError **error);

gboolean terminal_search_provider2_call_get_result_metas_sync (
    TerminalSearchProvider2 *proxy,
    const gchar *const *arg_identifiers,
    GVariant **out_metas,
    GCancellable *cancellable,
    GError **error);

void terminal_search_provider2_call_activate_result (
    TerminalSearchProvider2 *proxy,
    const gchar *arg_identifier,
    const gchar *const *arg_terms,
    guint arg_timestamp,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean terminal_search_provider2_call_activate_result_finish (
    TerminalSearchProvider2 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean terminal_search_provider2_call_activate_result_sync (
    TerminalSearchProvider2 *proxy,
    const gchar *arg_identifier,
    const gchar *const *arg_terms,
    guint arg_timestamp,
    GCancellable *cancellable,
    GError **error);

void terminal_search_provider2_call_launch_search (
    TerminalSearchProvider2 *proxy,
    const gchar *const *arg_terms,
    guint arg_timestamp,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean terminal_search_provider2_call_launch_search_finish (
    TerminalSearchProvider2 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean terminal_search_provider2_call_launch_search_sync (
    TerminalSearchProvider2 *proxy,
    const gchar *const *arg_terms,
    guint arg_timestamp,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TERMINAL_TYPE_SEARCH_PROVIDER2_PROXY (terminal_search_provider2_proxy_get_type ())
#define TERMINAL_SEARCH_PROVIDER2_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TERMINAL_TYPE_SEARCH_PROVIDER2_PROXY, TerminalSearchProvider2Proxy))
#define TERMINAL_SEARCH_PROVIDER2_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TERMINAL_TYPE_SEARCH_PROVIDER2_PROXY, TerminalSearchProvider2ProxyClass))
#define TERMINAL_SEARCH_PROVIDER2_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TERMINAL_TYPE_SEARCH_PROVIDER2_PROXY, TerminalSearchProvider2ProxyClass))
#define TERMINAL_IS_SEARCH_PROVIDER2_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TERMINAL_TYPE_SEARCH_PROVIDER2_PROXY))
#define TERMINAL_IS_SEARCH_PROVIDER2_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TERMINAL_TYPE_SEARCH_PROVIDER2_PROXY))

typedef struct _TerminalSearchProvider2Proxy TerminalSearchProvider2Proxy;
typedef struct _TerminalSearchProvider2ProxyClass TerminalSearchProvider2ProxyClass;
typedef struct _TerminalSearchProvider2ProxyPrivate TerminalSearchProvider2ProxyPrivate;

struct _TerminalSearchProvider2Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  TerminalSearchProvider2ProxyPrivate *priv;
};

struct _TerminalSearchProvider2ProxyClass
{
  GDBusProxyClass parent_class;
};

GType terminal_search_provider2_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (TerminalSearchProvider2Proxy, g_object_unref)
#endif

void terminal_search_provider2_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
TerminalSearchProvider2 *terminal_search_provider2_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
TerminalSearchProvider2 *terminal_search_provider2_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void terminal_search_provider2_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
TerminalSearchProvider2 *terminal_search_provider2_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
TerminalSearchProvider2 *terminal_search_provider2_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TERMINAL_TYPE_SEARCH_PROVIDER2_SKELETON (terminal_search_provider2_skeleton_get_type ())
#define TERMINAL_SEARCH_PROVIDER2_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TERMINAL_TYPE_SEARCH_PROVIDER2_SKELETON, TerminalSearchProvider2Skeleton))
#define TERMINAL_SEARCH_PROVIDER2_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TERMINAL_TYPE_SEARCH_PROVIDER2_SKELETON, TerminalSearchProvider2SkeletonClass))
#define TERMINAL_SEARCH_PROVIDER2_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TERMINAL_TYPE_SEARCH_PROVIDER2_SKELETON, TerminalSearchProvider2SkeletonClass))
#define TERMINAL_IS_SEARCH_PROVIDER2_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TERMINAL_TYPE_SEARCH_PROVIDER2_SKELETON))
#define TERMINAL_IS_SEARCH_PROVIDER2_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TERMINAL_TYPE_SEARCH_PROVIDER2_SKELETON))

typedef struct _TerminalSearchProvider2Skeleton TerminalSearchProvider2Skeleton;
typedef struct _TerminalSearchProvider2SkeletonClass TerminalSearchProvider2SkeletonClass;
typedef struct _TerminalSearchProvider2SkeletonPrivate TerminalSearchProvider2SkeletonPrivate;

struct _TerminalSearchProvider2Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  TerminalSearchProvider2SkeletonPrivate *priv;
};

struct _TerminalSearchProvider2SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType terminal_search_provider2_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (TerminalSearchProvider2Skeleton, g_object_unref)
#endif

TerminalSearchProvider2 *terminal_search_provider2_skeleton_new (void);


G_END_DECLS

#endif /* __TERMINAL_SEARCH_PROVIDER_GDBUS_GENERATED_H__ */
